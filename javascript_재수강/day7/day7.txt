변수의 범위
자바스크립트에서는 객체, 함수 모두 변수(상수)에 담을 수 있습니다.
변수의 범위란 변수가 접근할 수 있는 변수, 객체 그리고 함수의 집합을 의미합니다.

1. 지역변수
함수 내에서 선언된 변수를 가리킵니다.
지역변수는 변수가 선언된 함수 내에서만 유효하며 함수가 종료되면 메모리에서 사라집니다.

//x, y, sum은 지역변수
function func1(x, y) {
    let sum = 0;
    ...
    return sum;
}

//x, y, sum 변수는 알 수 없음
func1(1, 5);

2. 전역변수
함수의 외부에서 선언된 변수를 가리킵니다.
전역변수는 프로그램의 어느 영역에서나 접근할 수 있으며 웹 페이지가 닫혀야만 메모리에서 사라집니다
let global = 10;

function func1(x, y) {
    //전역변수는 여기에서도 사용할 수 있음
    console.log(global);
}

//여기에서도 전역변수를 사용할 수 있음
console.log(global);


객체지향프로그래망과 절차식 프로그래밍
어떻게 프로그램을 짤까?라는 프로그래밍 기법
언어는 기법을 채택하여 따름 -> 자바스크립트는 절차식과 객체지향 기법 각각을 일부 채택

객체(Object)
실생활에서 우리가 인식할 수 있는 사물들을 객체라고 합니다
사물은 명사나 동사로 표현할 수 있으며 명사는 변수, 동사는 함수로 구현할 수 있다
따라서 서로 관련된 명사와 동사들을 집합으로 메모리에 저장하고 싶을때 자료구조로 객체를 결정할 수 있다

프로퍼티(property)
자바스크립트의 기본 타입은 객체입니다. 객체란 이름과 값으로 구성된 프로퍼티의 정렬되지 않은 집합입니다.
프로퍼티의 값으로 함수도 올 수 있는데, 이를 프로퍼티 메소드라고 부릅니다

const dog = {} //빈 객체
const dog = {
    name: '루시', //프로퍼티 
    play: function(){ //프로퍼티 메소드
        ...
    }
    ...
}

dog 참조변수
    ref       -------------->    name:'루시'
                                 play: function(){}

배열과 객체의 차이
배열(보통 언어에서 특징)
    인덱스가 존재하여 연속성, 순서가 존재
    공통된 타입
    크기를 지정하고 크기가 변할 수 없다
객체
    타입이 자유롭다
    정렬되지 않았다


객체를 만드는 방법
1. 리터럴 표기법
자바스크립트에서 객체를 만드는 가장 쉬운 방법
const 객체명 = {
    프로퍼티명: 프로퍼티값,
    ...
}

2. 생성자를 이용한 객체 생성방법
같은 형태의 객체를 여러개 만들고 싶을때 사용할 수 있는 방법
new 연산자를 사용하여 객체를 생성하고 초기화할 수 있음. 이때 사용하는 메소드를 생성자라고 하며, 이 메소드는 새롭게 생성되는 객체를 초기화하는 역할을 함
function 생성자명(매개변수1, 매개변수2, ..){
    프로퍼티명 = 값;
    ...
}
const 객체명1 = new 생성자명(값1, 값2, ..)
const 객체명2 = new 생성자명(값1, 값2, ..)

객체명1 참조변수   ------------>  프로퍼티: 값
     ref                         ...

객체명2 참조변수   ------------>  프로퍼티: 값
     ref                         ...

3. 클래스를 이용한 객체 생성하는 방법
ecma6 이후 다른 언어의 클래스 방식을 따르기 위해 이 방법이 생김
클래스 형태지만 내부적으로는 생성자를 이용한 객체방법으로 객체를 생성한다

//파일형태로 객체 설계도를 만듬
const 클래스명 = class {
    constructor(매개변수1, 매개변수2, ..){
        프로퍼티명 = 값;
        ...
    }
    메소드명(매개변수1, 매개변수2, ..){
        ...
    }
}

//설계도대로 실제 값을 주입하여 객체를 만들고 메모리에 올리고 객체명으로 이를 가리킴
const 객체명 = new 클래스명(값1, 값2, ..);