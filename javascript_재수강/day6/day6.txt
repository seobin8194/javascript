사용자 정의 함수(function)
하나의 특별한 목적의 작업을 수행하도록 설계된 독립작인 블록을 의미
함수는 필요할때마다 호출하여 해당 작업을 반복해서 수행하기 때문에 코드를 재활용할 수 있습니다

1. 이름만 존재하는 함수
- 함수 선언식
    function 함수명(){
        함수가 호출되었을때 실행할 문장;
        ...
    }
    함수명();

- 함수 표현식
    const 함수명 = function(){
        함수가 호출되었을때 실행할 문장;
        ...
    }
    함수명();

* 자바스크립트는 함수를 변수에 저장이 가능
  -> 함수원형을 그대로 저장하는 것
  -> 함수명(다른 함수명);과 같이 함수를 파라미터로 전달가능
  -> 함수 표현식이나 화살표함수처럼 익명함수를 사용할 경우 호출하기 위해 함수명 대신 변수나 상수이용
* 자바스크립트는 script태그를 만나면 자바스크립트 파일을 먼저 읽고 선언된 함수를 먼저 메모리에 저장하고 다시 처음부터 읽는다
* 호이스팅
  함수선언식으로 선언된 함수는 메모리에 미리 저장이 되기 때문에 위치에 관계없이 에러가 발생되지 않습니다
  이때 함수 선언식은 호이스팅이 된다라고 표현합니다. 반면 함수 표현식은 함수 선언 후 호출해야 하기때문에 위치에 따라 에러가 발생할 수 있다
  따라서 함수를 엄격하게 사용할 수 있기 때문에 함수 선언식보다 함수 표현식을 사용하는 것을 권장한다.

2. 매개변수가 있는 함수
- 함수 선언식
    function 함수명(매개변수1, 매개변수2, ..){
        함수가 호출되었을때 실행할 문장;
        ...
    }
    함수명(값1, 값2, ..);

- 함수 표현식
    const 함수명 = function(매개변수1, 매개변수2, ..){
        함수가 호출되었을때 실행할 문장;
        ...
    }
    함수명(값1, 값2, ..);

- 디폴트 매개변수
    매개변수의 값을 정하지 않으면 대신 기본값을 매개변수에 저장

    function 함수명(매개변수1=값1, 매개변수2=값2, ..){
        함수가 호출되었을때 실행할 문장;
            ...
    }

- 나머지 매개변수
    생략접두사(...)를 사용하여 특정 위치의 인수부터 마지막 인수까지 한번에 지정할 수 있습니다
    function 함수명(매개변수1, 매개변수2, ...매개변수3){
        함수가 호출되었을때 실행할 문장;
        ...
    }
    함수명(1000, 2000, 3000, 4000, 5000, 6000, 7000);
         -----  -----  -----------------------------
         매변1   매변2       매개변수3에 저장

3. return 값이 존재하는 함수
    function 함수명(매개변수1, 매개변수2, ..){
        함수가 호출되었을때 실행할 문장;
        ...
        return 값;
    }
    const 상수명 = 함수명(값1, 값2, ..);

* 함수내에서 모든 처리를 끝내기보다는 함수에서는 계산만 출력하고 결과를 리턴하여 프로그램에서 그 결과를 활용하여 다양하게 처리하는게 좋다


화살표 함수
function 키워드를 사용하여 함수를 만드는것보다 간단하게 표현합니다. 화살표함수는 항상 익명입니다.
1. 매개변수가 없는 함수
const func1 = () => console.log('안녕하세요 자바스크립트');

2. 매개변수가 있는 함수
const func2 = x => console.log(`매개변수로 전달받은 값 : ${x}`);
const func3 = (x,y) => console.log(`매개변수로 전달받은 값: ${x}, ${y}`);

3. 리턴 값이 있는 경우
const sum = (x, y) => {
    let sum = 0;
    for(let i = x; i <= y; i++){
        sum += i;
    }
    return sum;
}

const result = sum(3, 10);

4. 동적으로 함수 생성
const age = 20;
const adult = (age > 18) ?
    () => alert('성인입니다') : 
    () => alert('미성년입니다');
=> 참이면 adult에 "() => alert('성인입니다')"를 저장하여 실행가능

adult();